generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  bio                String               @default("")
  twitter            String?
  linkedin           String?
  website            String?
  password           String?
  role               UserRole[]           @default([USER])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  canvaSessionState  CanvaSessionState[]
  CanvaUserToken     CanvaUserToken[]
  posts              Post[]
  RefreshToken       RefreshToken[]
  Snippet            Snippet[]
  EmailTemplate      EmailTemplate[]
  ExcalidrawDiagrams ExcalidrawDiagrams[]
  CanvaExportJob     CanvaExportJob[]
  TaskBoard          TaskBoard[]
  memberOfTaskBoards TaskBoard[]          @relation("TaskBoardMembers")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model CanvaSessionState {
  sessionId    String   @id
  codeVerifier String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CanvaUserToken {
  id           String @id @default(cuid())
  userId       String
  accessToken  String
  refreshToken String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CanvaJobStatus {
  IN_PROGRESS
  SUCCESS
  FAILED
}

model CanvaExportJob {
  exportId String         @id
  designId String
  status   CanvaJobStatus
  urls     String[]
  userId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ImageType {
  CANVA
  EXCALIDRAW
}

model ExcalidrawDiagrams {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  lastModified DateTime
  creatorId    String
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Project {
  id               String   @id @default(cuid())
  name             String
  githubLink       String
  demoLink         String
  category         String
  imageUrl         String
  content          String
  shortDescription String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  techStack        String[]
}

model Skill {
  id        String     @id @default(cuid())
  name      String
  skills    SubSkill[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SubSkill {
  id      String @id @default(cuid())
  name    String
  level   String
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Post {
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  id          String   @id @default(cuid())
  title       String
  content     String
  coverImage  String   @default("")
  slug        String   @unique
  tags        String[]
  keywords    String[]
  readingTime String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String   @default("")
  code        String
  language    String
  tags        String[]
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaskBoard {
  id        String       @id @default(cuid())
  title     String
  columns   TaskColumn[]
  creatorId String
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members   User[]       @relation("TaskBoardMembers")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TaskColumn {
  id          String    @id @default(cuid())
  title       String
  tasks       Task[]
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  TaskBoard   TaskBoard @relation(fields: [taskBoardId], references: [id])
  taskBoardId String
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  priority     String     @default("medium")
  dueDate      DateTime?
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  TaskColumn   TaskColumn @relation(fields: [taskColumnId], references: [id])
  taskColumnId String
  TaskTag      TaskTag[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String
  createdAt DateTime  @default(now())
  tasks     TaskTag[]
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
  @@unique([taskId, tagId])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  title     String
  creatorId String
  variables String[]
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
